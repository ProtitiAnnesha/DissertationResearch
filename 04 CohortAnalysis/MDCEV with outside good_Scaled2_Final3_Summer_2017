// Modified from Bhat's MDCEV code

library maxlik;
maxset;

/*****************************************************************************
                  Global Variable Definitions
*****************************************************************************/
clearg __row,nobs,_config,_alp0to1,_price,nc,datatset,_po,nvarm,nvardel,nvargam;

//__row    = 6240;     // Number of rows to be read at a time by the log-likelihood function
nobs     = 23315;    // Number of observations in the dataset
numout   = 1;       // Number of outside goods (i.e., always consumed goods)
_config  = 4;       // Utility specification configuration, possible values: 1,4,5,6,7
                    // see the documentation for an explanation of each configuration
_alp0to1 = 1;       // 1 if you want the Alpha values to be constrained between 0 and 1, 0 otherwise
                    // putting _alp0to1 = 1 is recommended practice and can provide estimation stability
_price   = 0;       // 1 if there is price variation across goods, 0 otherwise
nc       = 6;       // Number of alternatives (in the universal choice set) including outside goods - MnAtHm, ManOtHm, DisAtHm, DisOtHm, Work, Education

//dataset  = "d:\\gauss\\com\\mdcevcode\\testout"; // provide path for the gauss data matrix
dataset = "AHTUSV4.dat";
dataMat = loadd(dataset);  print "rows and columns of dataMat: " rows(dataMat) cols(dataMat);  // 23315 rows and 92 columns

//{ pointer,_po } = indices(dataset,"caseid"); // position of pointer to case number in data set, 
                                             // modify if the case number column has a name different than "caseid"

/*****************************************************************************
                    Variable Specification Area
*****************************************************************************/
/* Position of UNO variable (i.e., the column of ones) in data set.
   The dataset should consist of a column of ones.
   Modify if the label (in double-quotes) of the column of ones in your dataset is different from "uno"  */

{ unov,ivuno } = indices(dataset,"uno");

/* Position of SERO variable (i.e., the column of zeros) in data set. 
   The dataset should consist of a column of zeros.
   Modify if the label (in double-quotes) of the column of zeros in your dataset is different from "sero"  */

{ serov,ivsero } = indices(dataset,"sero");

/* Position of WEIGHT variable (i.e., the column of weights).
   If the data has weights, then the dataset should consist of a column of weights.
   Modify the label (in double-quotes) with the label of the weight variable, if your data has weights  */

{ weight,wtind } = indices(dataset,"uno");

/* Positions of the DEPENDENT Variables (i.e., the consumption quantities for each alternative - NOT consumption expenditures for each alternative).  
   Provide labels (one label in each double-quote) of the dependent variables (i.e., consumption quantities) in your dataset. 
   Number of labels = number of alternatives. */

/* Note however that the likelihood function is written to be based on the probability of consumption expenditures - Equation 19 of Bhat 2008. */

{ choicm,f } = indices(dataset,"ManAtHm"|"ManOtHm"|"DisAtHm"|"DisOtHm"|"Work"|"Educ");//Consumption x, in this case x and e are same because p is equal to 1 

/* Positions of PRICE variables.
   Provide labels of price variables (one label in each double-quote). Number of labels = number of alternatives.
   First good (i.e., outside good, or the first of the outside goods if there are several) should be specified as a numeraire good with price one (UNO)
   Provide all UNO variables if there is no price variation */

{ cprice,fp } = indices(dataset,"uno"|"uno"|"uno"|"uno"|"uno"|"uno");//Unit prices for three goods

/* Definition of INDEPENDENT variables.
   First 'numout' goods are those that are always consumed (i.e., the outside goods), and the first good is numeraire.
   In the following specification, ivm1, ivm2, ivm3 contain independent variable specifications (on right hand side) for baseline utility (PSI) for alternatives 1, 2, and 3;
   Add a row for ivm4 below if there is a 4th alternative, another addiitonal row for ivm5 if there is a 5th alternative, ... (number of rows = number of alternatives);
   Number of columns = Number of variables including alternative specific constants; consider first alternative as base  */

let ivm1 = { sero    sero    sero    sero  	sero  sero  	sero  	sero  	sero  	sero    sero  		sero 	sero 	sero 		sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	 sero 		sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 		sero 	 sero 	sero 	sero	sero 	sero	sero 	sero 	sero 	sero	sero  	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero  	sero	 sero   sero   sero 	 sero 	sero   sero   sero   sero 	 };//sero 	};//sero 	sero   sero 	sero 	sero 	sero 	sero   sero 	sero 	};//sero 	sero };
let ivm2 = { uno     sero    sero    sero   sero  female  	sero  	sero  	sero  	sero    period2  	period3 period4 sero 		sero 	sero 	sero 	sero 	sero 	sero 	AgeGrp2	AgeGrp3 AgeGrp4 AgeGrp5  sero 		sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 		sero 	 Worker sero 	sero	student sero	sero 	married	sero 	sero 	sero  	sero 	Unemp 	sero 	sero 	C3Age1 	C4Age1 	C5Age1 	sero 	sero 	sero 	sero  	C5Age2	 sero   sero   sero 	 sero   sero   retre  sero   sero    };//sero     };//sero 	sero   sero 	sero 	sero 	sero    retre  sero 	sero 	};//sero 	sero };	
let ivm3 = { sero    uno     sero    sero   sero  sero  	female  sero  	sero  	sero    sero 		sero 	sero 	period2  	period3 period4 sero	sero 	sero 	sero 	sero 	sero 	sero 	sero 	 AgeGrp1 	AgeGrp2 AgeGrp3 AgeGrp4 AgeGrp5 sero 	sero 	sero 	sero 		sero 	 sero 	Worker 	sero	sero 	sero	sero 	sero	married sero 	sero  	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero  	sero 	 sero   sero   sero 	 sero 	sero   sero   retre  sero 	 };//sero 	};//C4Age4  sero   sero 	sero 	sero 	sero    sero   retre 	sero 	};//sero 	sero };	
let ivm4 = { sero    sero     uno    sero   sero  sero  	sero  	female  sero  	sero    sero 		sero    sero 	sero 		sero 	sero 	period2 period3 period4	sero 	sero 	sero 	sero 	sero 	 sero 		sero 	sero 	sero 	sero	AgeGrp2 AgeGrp3 AgeGrp4 sero 		sero 	 sero 	sero 	Worker	sero 	student	sero 	sero	sero 	married sero  	sero  	sero 	Unemp 	sero 	sero 	sero 	sero 	C5Age1 	sero 	sero 	sero  	sero   	 sero   sero   C2Age4 C3Age4 C4Age4 sero   sero   retre   };//sero 	};//sero    C2Age4 C3Age4   C4Age4 	C2Age5 	C3Age5  sero   sero 	retre 	};//sero 	sero }; 
let ivm5 = { sero    sero     sero    uno   sero  sero  	sero  	sero  	female  sero    sero 		sero    sero 	sero 		sero 	sero 	sero 	sero 	sero 	period2 sero 	sero 	sero 	sero 	 sero 		sero 	sero 	sero 	sero 	sero 	sero 	sero 	AgeGrp4	    AgeGrp5  sero 	sero 	sero	sero 	sero	student sero	sero 	sero 	married sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero  	sero	 C4Age2 sero   sero 	 sero 	sero   sero   sero   sero 	 };//C3Age5   };//sero    sero   sero 	sero 	sero 	sero    sero   sero 	sero 	};//sero 	sero };
let ivm6 = { sero    sero     sero    sero  uno   sero  	sero  	sero  	sero  	female  sero 		sero    sero 	sero 		sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 	 sero 		sero 	sero 	sero 	sero 	sero 	sero 	sero 	sero 		sero 	 sero 	sero 	sero	sero 	sero	sero 	sero	sero 	sero 	sero  	married sero 	sero 	Unemp 	sero 	sero 	sero 	sero 	C3Age1 	C4Age1 	C5Age1 	sero	 sero   C4Age2 sero 	 sero 	sero   sero   sero   sero 	 };// sero 	};//sero 	sero   sero 	sero 	sero 	sero    sero   sero 	sero 	};//sero 	sero };*/


/* The above specification is for the following baseline utility expressions

Psi1 = exp( beta1*0     +  beta2*0     +   beta3*0      +  beta4*0)
Psi2 = exp( beta1*1     +  beta2*0     +   beta3*hhsize +  beta4*0)
Psi3 = exp( beta1*0     +  beta2*1     +   beta3*0      +  beta4*hhzise)    */

/* Add a row for v4 below if there is a 4th alternative, another additional row for v5 if there is a 5th alternative,.... (number of rows = number of alternatives) */

{ v1,ivmt1 } = indices(dataset,ivm1');
{ v2,ivmt2 } = indices(dataset,ivm2');
{ v3,ivmt3 } = indices(dataset,ivm3');
{ v4,ivmt4 } = indices(dataset,ivm4');
{ v5,ivmt5 } = indices(dataset,ivm5');
{ v6,ivmt6 } = indices(dataset,ivm6');


/* Define labels of the parameters in the baseline utility for output printing;
   Provide as many parameter labels as the number of columns in ivm1 (i.e., the number of variables in the Psi function) */

varnam =  "ASC2"|"ASC3"|"ASC4"|"ASC5"|"ASC6"|"female2"|"female3"|"female4"|"female5"|"female6"|
@The ij - first number is for period, the second for alt@
"per22"|"per32"|"per42"|"per23"|"per33"|"per43"|"per24"|"per34"|"per44"|"per25"|
"Age2_2"|"Age3_2"|"Age4_2"|"Age5_2"|"Age1_3"|"Age2_3"|"Age3_3"|"Age4_3"|"Age5_3"|"Age2_4"|"Age3_4"|"Age4_4"|
"Age4_5"|"Age5_5"|
"Worker_2"|"Worker_3"|"Worker_4"|
"Stndt2"|"Stdnt4"|"Stdnt5"|
"marrd2"|"marrd3"|"marrd4"|"marrd5"|"marrd6"|
"unemp2"|"unemp4"|"unemp6"|
"C3Age1_2"|"C4Age1_2"|"C5Age1_2"|
"C5Age1_4"|
"C3Age1_6"|"C4Age1_6"|"C5Age1_6"|
"C5Age2_2"|
"C4Age2_5"|
"C4Age2_6"|
"C2Age4_4"|"C3Age4_4"|"C4Age4_4"|
"retre2"|"retre3"|"retre4";


/*******************FOR SCALE****************************/
let ivp1 = { period1   period2    period3  period4 };      

{ vp1,ivpt1 } = indices(dataset,ivp1');

/*********END OF MODIFICATION FOR SCALE*********************/

/* In the following specification, ivd1, ivd2, ivd3 contain input data specifications (on right hand side) for satiation parameters (alphas) for alternatives 1, 2, and 3;
   Add a row below for ivd4 if there is a 4th alternative, another additional row for ivd5 if there is a 5th alternative,.... (number of rows = number of alternatives);
   Number of columns = Number of alternatives; Note that you can also add individual-specific variables below, so that satiation varies across individuals; However,
   you will then have to translate outputs to compute actual alpha parameters; This code is written to provide you with the alpha parameters directly for the case when
   there is no variation in alpha across individuals */

let ivd1 = { uno            sero            sero     sero  sero  sero };
let ivd2 = { sero           uno             sero     sero  sero  sero };
let ivd3 = { sero           sero            uno      sero  sero  sero };
let ivd4 = { sero           sero            sero     uno  sero  sero };
let ivd5 = { sero           sero            sero     sero  uno  sero };
let ivd6 = { sero           sero            sero     sero  sero  uno };
/* The above specification is for the following definitions of Satiation parameters 

Delta1 = ( theta1*1    + theta2*0     +  theta3*0) = theta1
Delta2 = ( theta1*0    + theta2*1     +  theta3*0) = theta2
Delta3 = ( theta1*0    + theta2*0     +  theta3*1) = theta3

Alpha = 1-exp(Delta) if Alpha < 1
Alpha = 1-(1/(1+exp(Delta))) if 0 < Alpha < 1   */

//Add a row for w4 below if there is a 4th alternative,.... (number of rows = number of alternatives)

{ w1,ivdt1 } = indices(dataset,ivd1');
{ w2,ivdt2 } = indices(dataset,ivd2');
{ w3,ivdt3 } = indices(dataset,ivd3');
{ w4,ivdt4 } = indices(dataset,ivd4');
{ w5,ivdt5 } = indices(dataset,ivd5');
{ w6,ivdt6 } = indices(dataset,ivd6');

/* In the following specification, ivg1, ivg2, ivg3 contain input data specifications (on the right hand side) for translation parameters (gammas) for alternatives 1, 2, and 3;
   Add a row for ivg4 if there is a 4th alternative, another additional row for ivd5 if there is a 5th alternative,....(number of rows = number of alternatives);
   Number of columns = Number of alternatives; Note that you can also add individual-specific variables below, so that gamma varies across individuals; However,
   you will then have to translate outputs to compute actual gamma parameters; This code is written to provide you with the gamma parameters directly for the case when
   there is no variation in gamma across individuals; Since gamma=0 for the outside goods, the first numout columns of the ivg vectors will be sero */

let ivg1 = { uno            sero            sero     sero  sero  sero  sero      sero     sero  	sero    sero    sero    sero   	sero      sero  	sero    sero   	sero  	sero    sero    sero    sero   	sero   	sero    sero   	sero    sero   	sero   	sero   	sero   	sero       sero    sero 	sero 	sero 	sero     sero 		};//sero  		sero            sero     sero  		sero            sero     sero  		sero            sero     sero  };
let ivg2 = { sero           uno             sero     sero  sero  sero  female    sero     sero  	worker  sero    sero    period2 period3   period4  	sero    sero   	sero  	sero    sero    sero    sero   	sero    sero    sero   	sero    sero   	sero   	sero   	sero   	sero       C3Age2 	sero 	C3Age3 	C4Age3 	sero   	 sero 		};//sero  		sero            sero     sero  		sero            sero     sero  		sero            sero     sero  };
let ivg3 = { sero           sero            uno      sero  sero  sero  sero      female   sero  	sero    worker  sero    sero   	sero      sero  	period2 period3 period4 sero    sero    sero    sero   	sero    sero    AgeGrp2 sero    sero   	sero   	sero   	sero   	C5Age1     sero 	C3Age2 	sero 	sero 	C4Age3   C3Age4 	};//C5Age1  	sero            sero     sero  		sero            sero     sero  		sero            sero     sero  };
let ivg4 = { sero           sero            sero     uno  sero  sero   sero      sero     female	sero    sero    worker  sero   	sero      sero  	sero    sero   	sero  	period2 period3 period4 sero   	sero    sero    sero   	AgeGrp1 AgeGrp2 AgeGrp3 sero   	sero   	sero       sero 	sero 	sero 	sero 	sero     sero 		};//sero  		C3Age1     		C4Age1   C5Age1  	sero            sero     sero  		sero            sero     sero  };
let ivg5 = { sero           sero            sero     sero  uno  sero   sero      sero     sero  	sero    sero    sero    sero    sero      sero  	sero    sero   	sero  	sero    sero    sero    period2 period3 period4 sero   	sero    sero   	sero   	AgeGrp2 AgeGrp3 sero       sero 	sero 	sero 	sero 	sero     sero 		};//sero  		sero            sero     sero  		C3Age1     		C4Age1   C5Age1  	sero            sero     sero  };
let ivg6 = { sero           sero            sero     sero  sero  uno   sero      sero     sero  	sero    sero    sero    sero   	sero      sero  	sero    sero   	sero  	sero    sero    sero    sero   	sero    sero    sero   	sero    sero   	sero   	sero   	sero   	sero       sero 	sero 	sero 	sero 	sero     sero 	    };//sero  		sero            sero     sero  		sero            sero     sero  		C3Age1     		C4Age1   C5Age1  	  };


/* The above specification is for the following definitions of Translation parameters 

Gamma1 = exp( phi1*0         + phi2*0     +  phi3*0) = exp(0), but later converted to exp(-1000)=0,
Gamma2 = exp( phi1*0         + phi2*1     +  phi3*0) = exp(phi2)
Gamma3 = exp( phi1*0         + phi2*0     +  phi3*1) = exp(phi3)   */

//Add a row for u4 below if there is a 4th alternative,... (number of rows = number of alternatives)

{ u1,ivgt1 } = indices(dataset,ivg1');
{ u2,ivgt2 } = indices(dataset,ivg2');
{ u3,ivgt3 } = indices(dataset,ivg3');
{ u4,ivgt4 } = indices(dataset,ivg4');
{ u5,ivgt5 } = indices(dataset,ivg5');
{ u6,ivgt6 } = indices(dataset,ivg6');

ivm = ivmt1'~ivmt2'~ivmt3'~ivmt4'~ivmt5'~ivmt6'; // can append more: e.g. ~ivmt4'~ivmt5' and so on, based on the number of alternatives
ivd = ivdt1'~ivdt2'~ivdt3'~ivdt4'~ivdt5'~ivdt6'; // can append more: e.g. ~ivdt4'~ivdt5' and so on, based on the number of alternatives
ivg = ivgt1'~ivgt2'~ivgt3'~ivgt4'~ivgt5'~ivgt6'; // can append more: e.g. ~ivgt4'~ivgt5' and so on, based on the number of alternatives
ivp = ivpt1'; @Indicator for periods@
//ivm contains the column numbers that are going into the utility equation
//ivd contains the column numbers that are going into the specification of delta
//ivg contains the column numbers that are going into the specificatin of w

nvarm = cols(ivm1);     // number of variables in baseline utility   = number of columns in ivm1, do not modify this
nvardel = cols(ivd1);   // number of variables in satiation          = number of columns in ivd1, do not modify this
nvargam = cols(ivg1);   // number of variables in translation        = number of columns in ivg1, do not modify this
nscale = cols(ivp1);   //number of scale parameters

// Associating columns with variable names

flagchm = f'; //flagchm contains the column numbers corresponding to different alternatives

/**********AVAILABILITY DUMMIES FOR WORK AND EDUCATION*****************/
{avbl5,avb5indx} = indices(dataset,"WorkAva");
{avbl6,avb6indx} = indices(dataset,"EduAva");

flagavm = ivuno~ivuno~ivuno~ivuno~avb5indx~avb6indx;//Append as many "ivuno" as the number of alternatives 
//flagavm = ivuno~ivuno~ivuno~ivuno~ivuno~ivuno;//Append as many "ivuno" as the number of alternatives 
                            //(all alternatives are considered to be available; if an alternative is not available, use ivsero for that alternative).
							//All the alternatives are assumed to be available in this case
flagprcm = fp';				//flagprcm contains the column numbers for unit prices

/* Do not modify the line below */

hh = zeros(1,numout)~ones(1,nc-numout);//hh = A row vector, 0 1 1
// | - Row concatenation
//~ - Column concatenation

/******************************************************************************
                          Starting values
******************************************************************************/
/* Creating matrices (EQMATDEL and EQMATGAM) of ones and zeros to define constraints across coefficients of variables;

   EQMATDEL should have as many columns as the number of variables in ivd1, ivd2... specifications (i.e., specifications for satiation/alpha parameters) 
   and as many rows as the number of distinct parameters. So if you have 5 alpha parameters, and you want the first two to be constrained to be the same, 
   the next two also constrained to be the same, and the last separate, then the EQMATDEL matrix will be:
   
   EQMATDEL = { 1 1 0 0 0  ,
                0 0 1 1 0  ,
                0 0 0 0 1  };

   EQMATGAM should have as many columns as the number of variables in ivg1, ivg2... specifications (i.e., specifications for translation/gamma parameters) 
   and as many rows as the number of distinct parameters. So if you have 5 gamma parameters, and you want the first two to be constrained to be the same, 
   the next two constrained to be the same, and the last separate; then the EQMATGAM matrix will be:
   
   EQMATGAM = { 1 1 0 0 0  ,
                0 0 1 1 0  ,
                0 0 0 0 1  };       */

/* Below is the code for defining EQMATDEL and EQMATGAM matrices; 
   These definitions correspond to restricted estimations of the alpha and gamma parameters across alternatives based on the configuration specified (see documentation) */
 //initializing betas, deltas and w's
 if _config==1;
     EQMATDEL = eye(nvardel);//seperate alpha for all the goods
     EQMATGAm = (ones(1,numout)|zeros(1,numout))~(zeros(1,nc-numout)|ones(1,nc-numout));
	 //eqmatgam = [1 0 0
				 //0 1	1] 	
     b = zeros(nvarm,1)|zeros(rows(EQMATDEL),1)|-1000*ones(numout,1)|zeros(rows(EQMATGAM)-numout,1);
	 //gamma for the outside good is equal to zero, so w = -1000, exp(W) = 0
	 //gamma for the other goods is fixed to 1, so w is 0, so that exp(w) = 1
     _max_active = ones(nvarm+rows(eqmatdel),1)|zeros(rows(eqmatgam),1); 
	 //the name _max_active needs to be changed
 elseif _config==4;
     EQMATDEL = ones(1,nc); @alpha fixed to zero for all goods including the outside good is fixed to zero@
     eqmatgam = eye(nvargam); @Seperate gamma estimated for all goods except the outside good@
     if _alp0to1 == 0;
      b = zeros(nvarm,1)|zeros(rows(EQMATDEL),1)|-1000*ones(numout,1)|zeros(rows(EQMATGAM)-numout,1);
     else;
      b = -6.70651919837336|	-5.64021315702226|	-7.05911135971396|	-6.35782632590345|	-6.8868206136794| @Constants@
		-0.0680646307687027|	-0.202215302812683|	-0.147713147545882|	-0.205810594645594|	-0.171175736382424| @Female gender dummy@
		 @Period dummies@
		 0.182833451118035|	0.167964654847283|	0.131984328910105|	0.130990870408359|	0.131854210579135|	0.145335019034383|	0.480874447168|	0.602188144765763|	0.579915949479477|	0.115570470197917|
	 @Age dummies@
		0.0738522450111633|	0.0708862132945742|	0.0780305206477048|	0.0908392734585123|	-0.286734112795287|	-0.24812487181017|	-0.275737579958363|	-0.153832580244425|	-0.057536725970794|	-0.0418001633753438|	-0.0574220649343434|	-0.240526543917408|	0.0691315600453495|	0.0694932348724677|
	 @Worker Dummy@
	 0.320695138159326|	-0.0345223935166341|	0.24437946331849|
	 @Student dummy@
	 0.100413526905839|	0.133590481583413|	0.0372634842903165|
	 @married dummy@
	 -0.0344009569482704|	-0.108023252808694|	-0.108782152322577|	-0.0902308567742989|	-0.189516185780069|
	 @Unemployment dummy@
	 0.0874478987092988|	0.0735171626983786|	-0.105275623146598|
	 @Age specific cohort dummies - Age group 1@
	 0.134562133078499|	0.0715841540548539|	0.085306833282844|	0.0710708098520937|	0.234365729530203|	0.288053636830021|	0.127244563953602|
	 @Age specific cohort dummy - Age group 2@
	0.0205760670887455|	-0.0287831854927843|	0.151675539390187|

	 @Age specific cohort dummy - Age group 3@
	 
	 @Age specific cohort dummy - Age group 4@
	 0.182807508126867|	0.22596270097312|	0.224110176726263|
	 
	 @Retre@
	 0.0562143635288376|	0.114566805615347|	0.0776615636319671|

	  -1000*ones(rows(EQMATDEL),1)|-1000*ones(numout,1)|3.4048|	3.7073|	4.7016|	5.7099|	6.9497|//|
	  @Gender Dummies@
	  0.1062|	-0.145|	-0.1084|
	  @Student dummies@
	  
	  @worker dummy@
	  -0.4711|	-0.3931|	-0.3911|
	  @period dummies@
	  1.8009|	1.7604|	1.74|	1.936|	2.1002|	2.1348|	1.3796|	1.1445|	1.186|	1.4081|	1.4923|	1.4793|
	  @Age dummies in gamma@
	  -0.0335|	0.2347|	0.123|	0.1014|		0.337|	0.3224|	
	  @Age specific cohort dummies - Age group 01@
	  0.1004|
	  @Age specific cohort dummies - Age group 02@
	  0.1179|0.1532|
	  @Age specific cohort dummies - Age group 03@
	  -0.0367|-0.0334|-0.1648|
	  @Age specific cohort dummies - Age group 04@
	  -0.0885;
	  @Age specific cohort dummies - Age group 05@
	  
	  
	  
	  @Student dummy@
	  //-0.1211|
	  @Worker dummy@
	  //-0.6497|	-0.4984|	-0.5387|
	  @Period Dummy@
	  //2.2867|	2.095|	2.084|	2.1787|	2.1672|	2.3372|	1.6253|	1.0575|	1.1727|	1.1479|	1.0895|	1.1211|	1.8177|	1.4572|	1.7066;
     endif; @alpha fixed to zero for all goods including the outside good@ @gamma fixed to zero for outside good, estimated for all  other goods@
    _max_active = ones(nvarm,1)|zeros(rows(eqmatdel),1)|zeros(numout,1)|ones(rows(eqmatgam)-numout,1);
 elseif _config==5;
     EQMATDEL = ones(1,nvardel); @Alpha for all goods are fixed and estimated including the outside good@
     eqmatgam = eye(nvargam); @Seperate gamma values estimated for all goods except for the outside good@
     if _alp0to1 == 0;
      b = zeros(nvarm,1)|zeros(rows(EQMATDEL),1)|-1000*ones(numout,1)|zeros(rows(EQMATGAM)-numout,1);
     else;
      b = -5.7032|	-5.0345|	-7.1644|	-5.2522|	-12.0615| @Constants@
		 -0.148|	-0.1714|	-0.2017|	-0.3282|	1.0377| @Female gender dummy@
		 @Period dummies@
		-0.0329|	-0.0208|	-0.1805|	0.2832|	0.1938|	0.2645|	0.3365|	0.7826|	0.74|	-0.1224|	-0.1448|	-0.1632|	-9.0733|	2.9385|	2.4|
	  ones(rows(EQMATDEL),1)|@Alpha outside good@
	  -1000*ones(numout,1)|3.0931|	3.549|	3.8679|	5.2383|	-0.076; @Constants@
     endif; 
     _max_active = ones(nvarm+rows(eqmatdel),1)|zeros(numout,1)|ones(rows(eqmatgam)-numout,1);
 elseif _config==6; @Alpha for outside good estimated@ @Alpha for all other goods fixed to zero@ 
     EQMATDEL = (ones(1,numout)|zeros(1,numout))~(zeros(1,nc-numout)|ones(1,nc-numout));
     eqmatgam = eye(nc); @Different gamma estimated for all the goods except for the outside good@
     if _alp0to1 == 0;
      b = zeros(nvarm,1)|zeros(rows(EQMATDEL),1)|-1000*ones(numout,1)|zeros(rows(EQMATGAM)-numout,1);
     else;
      b = zeros(nvarm,1)|-5*ones(numout,1)|-1000*ones(rows(EQMATDEL)-numout,1)|-1000*ones(numout,1)|zeros(rows(EQMATGAM)-numout,1);
     endif; 
     _max_active = ones(nvarm,1)|ones(numout,1)|zeros(rows(eqmatdel)-numout,1)|zeros(numout,1)|ones(rows(eqmatgam)-numout,1);
 elseif _config==7; @Alpha fixed for all goods including for outside good@
     EQMATDEL = ones(1,nc); @Gamma for all goods fixed to one except for @
     eqmatgam = eye(nc);
     if _alp0to1 == 0;
      b = zeros(nvarm,1)|zeros(rows(EQMATDEL),1)|-1000*ones(numout,1)|zeros(rows(EQMATGAM)-numout,1);
	  //For outside good gamma should be equal to 0 and for other goods gamma should be equal to 1
     else;
      b = zeros(nvarm,1)|-1000*ones(rows(EQMATDEL),1)|-1000*ones(numout,1)|zeros(rows(EQMATGAM)-numout,1);
     endif; 
     _max_active = ones(nvarm,1)|zeros(rows(eqmatdel),1)|zeros(rows(eqmatgam),1);
 endif;

/* Defining variable labels in satiation and translation parameter terms for output printing */

  varndell = 0 $+ "D" $+ ftocv(seqa(1,1,rows(eqmatdel)),2,0);
  varngam = 0 $+ "G" $+ ftocv(seqa(1,1,rows(eqmatgam)),2,0);

scale = 0|-1.08426662497172|	-0.996692021353088|	-0.977013156655846; @These are the initial values for the delta parameters@ @exp of 0 would be 1@
b = b|scale;        // 1 appended as a starting value for the scale parameter

if _price == 1;
  _max_active = _max_active|ones(nscale,1);      // scale estimated if the data contains price variation
else;
  //_max_active = _max_active|0|ones(nscale-1,1);      // scale fixed to 1 if the data does not contain price variation
  _max_active = _max_active|0|zeros(nscale-1,1);      // scale fixed to 1 if the data does not contain price variation
endif; 

// You can also provide your own starting values


/* Other Maxlik globals */

_max_ParNames = varnam|varndell|varngam|"sigm1"|"sigm2"|"sigm3"|"sigm4";     // Appending all the parameter (or coefficient) names
//_max_GradProc=&lgd;             
_max_Options = { bfgs stepbt };
_max_CovPar = 1;        // modify according to the type of standard errors you need


/******************************************************************************
// ACTUAL PROGRAM AREA BEGINS, YOU DO NOT HAVE TO MODIFY ANYTHING BELOW THIS LINE
// Format of outputs is provided in the documentation
// Note that for the same variable specification, the number of parameters in the output depends upon the chosen configuration (i.e., _config) of the utility function 
// Last parameter corresponds to scale, which is restricted to 1 if there is no price variation in the data
******************************************************************************/
//call lpr(b, dataMat);
{ x,f,g,cov,retcode } = maxprt(maxlik(dataset,0,&lpr,b));
//call lpr(b, dataMat);
// The above line calls the procedures that provide as output the parameterized versions of Alphas and Gammas, and prints the outputs

// The following code passes those parameters into another procedure (lpr1) to obtain the actual values of Alphas and Gammas, along with appropriate standard errors and t-statistics, and print the outputs

/*clearg _max_gradproc;

if _alp0to1 == 0;
 b = x[1:nvarm]|1-exp(x[nvarm+1:nvarm+rows(eqmatdel)])|exp(x[nvarm+rows(eqmatdel)+1:nvarm+rows(eqmatdel)+rows(eqmatgam)])|x[nvarm+rows(eqmatdel)+rows(eqmatgam)+1];
else;
 b = x[1:nvarm]|(1/(1+exp(-x[nvarm+1:nvarm+rows(eqmatdel)])))|exp(x[nvarm+rows(eqmatdel)+1:nvarm+rows(eqmatdel)+rows(eqmatgam)])|x[nvarm+rows(eqmatdel)+rows(eqmatgam)+1];
endif;*/

/* Normally would not need to restrict iterations to zero get alpha and gamma parameters directly, because unparameterized and parameterized values should be the same;
   however, in some cases, such as _alp0to1=1, your parameterized form will guarantee alpha to be between 0 to 1, but direct estimation can get you negative value; Thus,
   not allowing optimization when undertaking direct estimation; when _alp0to1=1, you can take this next line out */

// _max_Maxiters = 0;       

//{ x,f,g,cov,retcode } = maxprt(maxlik(dataset,0,&lpr1,b));

/******************************************************************************
                          Procedure definitions begin
******************************************************************************/

/* procedure for log likelihood function calculation */
proc lpr(x,dta);
 local e1,popass,p0,xdel,xgam,v2,w2,u2,j,v,w,u,a,b,m,c,xsig,ylarge1,ylarge2,fin,as,ass,r,err,ylarge,
   xsigm,vv,vlos,e,ut,p1,p2,p3,z,w1,z1,d,f,wt, bsigm;
 e1 = rows(dta);
 wt = dta[.,wtind];
 popass = dta[.,_po];
 xdel = eqmatdel'*x[nvarm+1:nvarm+rows(eqmatdel)];
 //Convreting the del from number to be estimated to the number of alternatives
 xgam = eqmatgam'*x[nvarm+rows(eqmatdel)+1:nvarm+rows(eqmatdel)+rows(eqmatgam)];
 //Convreting gamma from number of paramteres to be estimated to the nnumber of altrenatives
 //xsigm = x[nvarm+rows(eqmatdel)+rows(eqmatgam)+1];
 /*local check;
 check = 34|16|17|18|65|66|67|70|71|72|74|75|76|79|80|81|84|85|19|20|21|22|23;
 print sumc(dta[.,check]);*/
bsigm = x[nvarm+rows(eqmatdel)+rows(eqmatgam)+1:nvarm+rows(eqmatdel)+rows(eqmatgam)+nscale]; //Getting the scale values
 v2 = (ones(nc,1) .*. x[1:nvarm])*~(dta[.,ivm])';
 w2 = (ones(nc,1) .*. xdel)*~(dta[.,ivd])';
 u2 = (ones(nc,1) .*. xgam)*~(dta[.,ivg])';
 //print "Observations within each period: " sumc(dta[.,ivp]); @Number of observations from each period seem to be correct@
 xsigm = exp(sumc(bsigm *~(dta[.,ivp])')); @transpose the period data matrix then multiply by the scale value@ @After sumc xsigm is a e1 by 1 vector@
	@Then taking the exponent to make the scale always positive@
 
@AFTER THIS NOTHING NEEDS TO BE CHANGED RELATED TO SCALE EXCEPT THAT, WHENEVER, YOU NEED SCALE USE ELEMENT BY ELEMENT OPERATOR@

 /* During the parameter search, sometimes the value of x[rows(x)] (i.e., the scale parameter) may go below 0. 
    The command below helps the iterations get back on track. Note that final results will generally not be affected by this; 
    If affected, you will get a negative value printed for sigm (scale) in the output   */

 /*if xsigm<=0;
   xsigm=1;
 endif;*/

 j=1;
 v = {};
 w = {};
 u = {};
 do until j == nc+1;
   v = v~(sumc(v2[(j-1)*nvarm+1:(j*nvarm),.]));
   w = w~(sumc(w2[(j-1)*nvardel+1:(j*nvardel),.]));
   u = u~(sumc(u2[(j-1)*nvargam+1:(j*nvargam),.]));
   j = j+1;
 endo;
 //u, v and w are 1000 by 3 columns where 1000 is the number of rows and 3 is the number of columns
 //Which represents the number of alternatives
 
 u[.,1:numout]=-1000*ones(e1,numout); //Makes the w for outside good to be equal to -1000, so that exp(w) is equal to 0
 //For outside good we never want a corner solution, it is always consumed, so gamma can be fixed to 0
 
 clear v2,w2;

 a = exp(w); /* a is (1-Alpha) */
 if _alp0to1;
   a = 1/(1+exp(w)); 
 endif;

 f = exp(u); //Gamma
 b = dta[.,flagchm] .> 0; //flagchm contain the consuption
 //b is the indictaor of whether a good is consumed or not
 //A 1000 by 3 matrix, 1000 observations, 3 columns
 m = sumc((b'));//Vector of 1000 rows, represents for each ind how many goods are consumed
 c = (a.*b)./((dta[.,flagchm]+f)); //1000 by 3 matrix
 //f(i) = (1 - alpha)/(consumotion + exp(w))
 c = c./(dta[.,flagprcm]); //f by p, 1000 by 3 matrix
 c = substute(c,b.==0,1);
 e = (1/c).*b;  //p by f
 d = sumc((e')); // sum over m
 c = (prodc((c'))).*d; 
 //c = multiplcation of f over m * sum(p/f) over m
 v[.,1:numout] = v[.,1:numout]-a[.,1:numout].*ln(dta[.,flagchm[1:numout]]+f[.,1:numout])-ln(dta[.,flagprcm[1:numout]]);
 v[.,numout+1:nc] = v[.,numout+1:nc]-a[.,numout+1:nc].*ln((dta[.,flagchm[numout+1:nc]]+f[.,numout+1:nc])./f[.,numout+1:nc])-ln(dta[.,flagprcm[numout+1:nc]]);
 ut = v./xsigm;
 p1 = exp(ut);
 //print "rows(p1): " rows(p1) "cols(p1): " cols(p1);
 //print "rows(dta[.,flagavm]): " rows(dta[.,flagavm]) "cols(dta[.,flagavm]): " cols(dta[.,flagavm]);
 p2 = (p1.*dta[.,flagavm])./sumc((p1.*dta[.,flagavm])');
 //p2 is exp(v/sigma)/sum over all k exp(v/sigma)
 //print "inconsistency: " sumc((dta[.,flagchm[6]] .> 0) .and (dta[.,flagavm] .==0));
 p3 = substute(p2,b.==0,1);
 p3 = (prodc((p3'))).*c.*((m-1)!);
 p3 = p3./((xsigm).^(m-1));
 z = p3;
 w1=zeros(e1,1);
//print "z: " z;
if z > w1;
     z1=ln(z);
  else;
  print "yes";
     z1=ln(z-((z.<=w1).*(z-0.0001)));
 endif;
 retp(wt.*z1);
endp;
  

/* Procedure for gradient function correspondign to the above log-likelihood fucntion, lpr*/
proc lgd(x,dta);
 local e1,popass,p0,xdel,xgam,v2,w2,u2,j,v,w,u,a,b,m,c,xsig,ylarge1,ylarge2,fin,as,ass,r,err,ylarge,
   vv,vlos,ut,uts,f1,p1,p2,p3,z,w1,z1,d,e;
 local gv,gd,gg,gge,g1,g1s,g2,h,g2v,g2d,g2g,g2e,ylargev,giterv,giterd,giterg,gitere;
 local xsigm,xcov,xcov1,giterr,s,asr,assr,errr;
 local bb,g2s,as1,ass1,ggr,err1,g2r,g4,g5,gitere1,wt;
 e1 = rows(dta);
 wt = dta[.,wtind];
 popass = dta[.,_po];
 p0 = zeros(e1,1);
 xdel = eqmatdel'*x[nvarm+1:nvarm+rows(eqmatdel)];
 xgam = eqmatgam'*x[nvarm+rows(eqmatdel)+1:nvarm+rows(eqmatdel)+rows(eqmatgam)];
 xsigm = x[nvarm+rows(eqmatdel)+rows(eqmatgam)+1];
 v2 = (ones(nc,1) .*. x[1:nvarm])*~(dta[.,ivm])';
 w2 = (ones(nc,1) .*. xdel)*~(dta[.,ivd])';
 u2 = (ones(nc,1) .*. xgam)*~(dta[.,ivg])';

 j=1;
 v = {};
 w = {};
 u = {};
 do until j == nc+1;
   v = v~(sumc(v2[(j-1)*nvarm+1:(j*nvarm),.]));
   w = w~(sumc(w2[(j-1)*nvardel+1:(j*nvardel),.]));
   u = u~(sumc(u2[(j-1)*nvargam+1:(j*nvargam),.]));
   j = j+1;
 endo;
 u[.,1:numout]=-1000*ones(e1,numout);  
 clear v2,w2;

 a = exp(w); /* a is (1-Alpha) */
 if _alp0to1;
   a = 1/(1+exp(w)); 
 endif;

 f = exp(u);
 b = dta[.,flagchm] .> 0;
 m = sumc((b'));
 c = (a.*b)./((dta[.,flagchm]+f));
 c = c./(dta[.,flagprcm]); 
 c = substute(c,b.==0,1);
 e = (1/c).*b;  
 d = sumc((e'));
 c = (prodc((c'))).*d;
 v[.,1:numout] = v[.,1:numout]-a[.,1:numout].*ln(dta[.,flagchm[1:numout]]+f[.,1:numout])-ln(dta[.,flagprcm[1:numout]]);
 v[.,numout+1:nc] = v[.,numout+1:nc]-a[.,numout+1:nc].*ln((dta[.,flagchm[numout+1:nc]]+f[.,numout+1:nc])./f[.,numout+1:nc])-ln(dta[.,flagprcm[numout+1:nc]]);
 ut = v./xsigm;
 uts = -ut./xsigm;
 p1 = exp(ut);
 p2 = (p1.*dta[.,flagavm])./sumc((p1.*dta[.,flagavm])');
 p3 = substute(p2,b.==0,1);
 p3 = (prodc((p3'))).*c.*((m-1)!);
 p3 = p3./((xsigm)^(m-1));

 g1 = (ones(e1,1) .*.eye(nc)) - (p2 .*. ones(nc,1));
 g1 = g1.*vecr(b);
 g1s = g1.*(uts.*.ones(nc,1));
 j=1;
 g2 = {};
 g2s = {};
 do until j == e1+1;
   g2 = g2~(sumc(g1[(j-1)*nc+1:(j*nc),.]));
   g2s = g2s~(sumc(g1s[(j-1)*nc+1:(j*nc),.]));
   j = j+1;
 endo;
 clear g1;
 h = dta[.,flagchm]+f; // consumption + exp(w)
 g2 = (1/xsigm).*(g2').*p3;
 f1 = (1-hh)+hh.*f;//makes exp(w) i.e. gamma to be equal to 1 for outside good
 g2s = (sumc(g2s)-((m-1)/xsigm));//1000 by 1 , a column vector
 //g2s is the first gradient of the likelihood wrt sigma
 if _alp0to1 == 0;
   g2d = g2.*(((ln(h./f1)).*(-a)))+p3.*b+p3.*(e./d).*(-1);
 else;
  g2d = g2.*(((ln(h./f1)).*(a.*(1-a))))+p3.*(a-1).*b+p3.*(e./d).*(1-a);
 endif;
 g2g = (g2.*(-a).*(1./h).*(-1/f1).*dta[.,flagchm]+p3.*(-1./h).*b+p3.*(e./d).*(1./h)).*f;
 g2v = ones(1,nvarm).*.g2';
 g2d = ones(1,nvardel).*.g2d';
 g2g = ones(1,nvargam).*.g2g';
 ylargev= dta[.,ivm];
 gv = (reshape((sumc(g2v.*(reshape(ylargev',nc,e1*nvarm))))',nvarm,e1))';
 gd = (reshape((sumc(g2d.*(reshape(((dta[.,ivd])'),nc,e1*nvardel))))',nvardel,e1))';
 gg = (reshape((sumc(g2g.*(reshape(((dta[.,ivg])'),nc,e1*nvargam))))',nvargam,e1))';
 retp(wt.*(((gv~gd*eqmatdel'~gg*eqmatgam')./p3)~g2s));
endp;


/* Procedure to obtain actual values of Alphas and Gammas */
proc lpr1(x,dta);
 local e1,popass,p0,xdel,xgam,v2,w2,u2,j,v,w,u,a,b,m,c,xsig,ylarge1,ylarge2,fin,as,ass,r,err,ylarge,
   xsigm,vv,vlos,e,ut,p1,p2,p3,z,w1,z1,d,f,wt;
 e1 = rows(dta);
 wt = dta[.,wtind];
 popass = dta[.,_po];
 xdel = eqmatdel'*x[nvarm+1:nvarm+rows(eqmatdel)];
 xgam = eqmatgam'*x[nvarm+rows(eqmatdel)+1:nvarm+rows(eqmatdel)+rows(eqmatgam)];
 xsigm = x[nvarm+rows(eqmatdel)+rows(eqmatgam)+1];
 v2 = (ones(nc,1) .*. x[1:nvarm])*~(dta[.,ivm])';
 w2 = (ones(nc,1) .*. xdel)*~(dta[.,ivd])';
 u2 = (ones(nc,1) .*. xgam)*~(dta[.,ivg])';

 j=1;
 v = {};
 w = {};
 u = {};
 do until j == nc+1;
   v = v~(sumc(v2[(j-1)*nvarm+1:(j*nvarm),.]));
   w = w~(sumc(w2[(j-1)*nvardel+1:(j*nvardel),.]));
   u = u~(sumc(u2[(j-1)*nvargam+1:(j*nvargam),.]));
   j = j+1;
 endo;

 clear v2,w2;

 a = 1-w;
 f = u;
 b = dta[.,flagchm] .> 0;
 m = sumc((b'));
 c = (a.*b)./((dta[.,flagchm]+f));
 c = c./(dta[.,flagprcm]); 
 c = substute(c,b.==0,1);
 e = (1/c).*b;  
 d = sumc((e'));
 c = (prodc((c'))).*d;
 v[.,1:numout] = v[.,1:numout]-a[.,1:numout].*ln(dta[.,flagchm[1:numout]]+f[.,1:numout])-ln(dta[.,flagprcm[1:numout]]);
 v[.,numout+1:nc] = v[.,numout+1:nc]-a[.,numout+1:nc].*ln((dta[.,flagchm[numout+1:nc]]+f[.,numout+1:nc])./f[.,numout+1:nc])-ln(dta[.,flagprcm[numout+1:nc]]);
 ut = v./xsigm;
 p1 = exp(ut);
 p2 = (p1.*dta[.,flagavm])./sumc((p1.*dta[.,flagavm])');
 p3 = substute(p2,b.==0,1);
 p3 = (prodc((p3'))).*c.*((m-1)!);
 p3 = p3./((xsigm)^(m-1));
 z = p3;
 w1=zeros(e1,1);
 if z > w1;
     z1=ln(z);
  else;
  print "yes";
     z1=ln(z-((z.<=w1).*(z-0.0001)));
 endif;
 retp(wt.*z1);
endp;
  
